# Î¨QRH Framework - Makefile Usage Examples
# Quick reference for common make commands

# =============================================================================
# QUICK START COMMANDS
# =============================================================================

# First time setup
make setup              # Build image and start all services

# Daily development
make shell              # Open interactive shell for development
make test               # Run all validation tests
make demo               # Run all demonstrations

# =============================================================================
# TESTING AND VALIDATION
# =============================================================================

# Complete test suite
make test               # All tests: simple + comprehensive + robust

# Individual test components
make test-simple        # Quick validation (< 1 min)
make test-comprehensive # Full integration test (< 5 min)
make test-robust        # Statistical validation (< 10 min)
make test-4d            # 4D Unitary Layer specific tests

# Performance validation
make benchmark          # Performance benchmarks
make validate-all       # Tests + demos + benchmarks

# CI/CD pipeline
make ci-test            # Lightweight test suite for CI

# =============================================================================
# DEMONSTRATIONS AND ANALYSIS
# =============================================================================

# All demonstrations
make demo               # Run all demos in sequence

# Individual demonstrations
make fractal            # Fractal dimension analysis + visualizations
make spider             # Genetic algorithm spider evolution
make integration        # Fractal-PyTorch integration validation
make habitat            # Living ecosystem habitat demo
make ecosystem          # Start live ecosystem web server (port 8080)

# =============================================================================
# DEVELOPMENT ENVIRONMENT
# =============================================================================

# Interactive development
make shell              # Regular user bash shell
make shell-root         # Root access bash shell (for system changes)

# Development utilities
make logs               # View real-time container logs
make status             # Show container and volume status
make results            # List generated images and reports

# Jupyter notebook (if needed)
make jupyter            # Start Jupyter server on port 8888

# Code quality
make format             # Format Python code with black
make lint               # Run flake8 linting

# =============================================================================
# GPU SUPPORT
# =============================================================================

# GPU setup
make gpu-setup          # Start services with GPU support
make gpu-test           # Test CUDA/GPU functionality

# =============================================================================
# DATA MANAGEMENT
# =============================================================================

# View results
make results            # Show generated files and directories

# Backup
make backup             # Create timestamped backup of volumes

# Cleanup (selective)
make clean-images       # Remove generated images only
make clean-logs         # Remove log files only

# =============================================================================
# MAINTENANCE AND CLEANUP
# =============================================================================

# Service management
make up                 # Start services (alias: make run)
make down               # Stop services (alias: make stop)
make restart            # Restart all services
make logs               # View container logs

# Complete cleanup
make clean              # Remove containers, volumes, and images
make reset              # Clean + rebuild everything from scratch

# =============================================================================
# PRODUCTION AND DEPLOYMENT
# =============================================================================

# Production builds
make production         # Build optimized production image
make docker-push        # Push image to registry (set REGISTRY variable)

# =============================================================================
# INFORMATION AND HELP
# =============================================================================

# Documentation
make help               # Show all available commands with descriptions
make info               # Show system and project information
make docs               # Generate documentation

# =============================================================================
# COMMON WORKFLOWS
# =============================================================================

# New contributor workflow:
# 1. make setup           # Initial setup
# 2. make test            # Verify everything works
# 3. make shell           # Start development
# 4. make demo            # See what the framework can do

# Research workflow:
# 1. make setup           # Setup environment
# 2. make fractal         # Analyze fractal properties
# 3. make spider          # Run evolution simulations
# 4. make results         # View generated data
# 5. make backup          # Backup important results

# Development workflow:
# 1. make shell           # Open development environment
# 2. # Edit code on host (mounted volume)
# 3. make test-simple     # Quick validation
# 4. make test            # Full validation before commit

# Demonstration workflow:
# 1. make setup           # Ensure everything is running
# 2. make demo            # Run all demonstrations
# 3. make ecosystem       # Start interactive web demo
# 4. # Open browser to localhost:8080

# Troubleshooting workflow:
# 1. make logs            # Check for errors
# 2. make status          # Verify container state
# 3. make clean           # Clean slate if needed
# 4. make setup           # Rebuild everything

# =============================================================================
# ADVANCED USAGE
# =============================================================================

# Custom package installation:
# make shell
# > pip install new-package
# > # Test new functionality
# > exit
# # Add to requirements.txt and rebuild

# Volume management:
# make backup             # Before major changes
# make clean              # Remove old volumes
# make setup              # Fresh start

# Development with GPU:
# make gpu-setup          # GPU-enabled containers
# make gpu-test           # Verify GPU access
# make shell              # Develop with GPU support

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Customization via environment variables:
# DOCKER_TAG=dev make build              # Custom tag
# REGISTRY=myregistry.com make docker-push # Custom registry
# PACKAGES="numpy scipy" make install    # Install packages

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common issues and solutions:

# Issue: "make: command not found"
# Solution: Install make (GNU Make)

# Issue: "docker: command not found"
# Solution: Install Docker and start Docker daemon

# Issue: "docker-compose: command not found"
# Solution: Install docker-compose

# Issue: "Permission denied"
# Solution: make shell-root (for container issues)
#          sudo chown -R $USER:$USER . (for host issues)

# Issue: "Out of disk space"
# Solution: make clean && docker system prune -a

# Issue: "Container won't start"
# Solution: make logs (check errors), make clean, make setup

# Issue: "Tests failing"
# Solution: make clean && make setup && make test

# =============================================================================
# PERFORMANCE TIPS
# =============================================================================

# Faster rebuilds:
# - Only rebuild when Dockerfile or requirements.txt change
# - Use 'make up' instead of 'make setup' for existing images

# Resource management:
# - Use 'make down' when not actively developing
# - Use 'make clean-logs' periodically to save disk space
# - Monitor with 'make status'

# Development efficiency:
# - Keep 'make shell' open for interactive work
# - Use 'make test-simple' for quick validation
# - Use 'make results' to track progress