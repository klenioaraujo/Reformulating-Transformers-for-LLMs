#!/usr/bin/env python3
"""
Teste de Integra√ß√£o dos Filtros Cognitivos
==========================================

Testa a integra√ß√£o completa do pipeline:
Input ‚Üí QRHLayer (spectral) ‚Üí SemanticAdaptiveFilter (cognitive) ‚Üí Output
"""

import sys
from pathlib import Path

# Adicionar path do projeto
sys.path.insert(0, str(Path(__file__).parent))

from src.core.enhanced_qrh_processor import create_enhanced_processor
import json

def test_cognitive_integration():
    """Teste completo da integra√ß√£o cognitiva."""

    print("=" * 80)
    print("TESTE DE INTEGRA√á√ÉO - FILTROS COGNITIVOS")
    print("=" * 80)

    # Criar processador com filtros cognitivos habilitados
    print("\nüöÄ Inicializando processador com filtros cognitivos...")
    processor = create_enhanced_processor(
        embed_dim=64,
        device="cpu",
        enable_cognitive_filters=True
    )

    # Cen√°rios de teste
    test_cases = [
        {
            "name": "Teste 1: Texto simples e coerente",
            "text": "O sistema Œ®QRH demonstra efici√™ncia superior em processamento quaterni√¥nico.",
            "expected": "Baixa contradi√ß√£o, alta relev√¢ncia, baixo vi√©s"
        },
        {
            "name": "Teste 2: Texto com contradi√ß√µes",
            "text": "A √°gua sempre ferve a 100¬∞C. No entanto, a √°gua pode ferver a temperaturas diferentes dependendo da press√£o atmosf√©rica.",
            "expected": "Alta contradi√ß√£o detectada"
        },
        {
            "name": "Teste 3: Texto com m√∫ltiplos t√≥picos",
            "text": "Transformadores quaterni√¥nicos s√£o eficientes. Gatos s√£o animais dom√©sticos. A f√≠sica qu√¢ntica √© complexa.",
            "expected": "Baixa relev√¢ncia devido a t√≥picos dispersos"
        }
    ]

    results = []

    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{'=' * 80}")
        print(f"üìù {test_case['name']}")
        print(f"{'=' * 80}")
        print(f"Entrada: {test_case['text']}")
        print(f"Esperado: {test_case['expected']}")
        print()

        try:
            # Processar texto
            result = processor.process_text(test_case['text'], use_cache=False)

            # Exibir resultados
            print("‚úÖ Status:", result['status'])
            print(f"‚è±Ô∏è  Tempo de processamento: {result['processing_time']:.4f}s")
            print(f"üî¢ Alpha adaptativo: {result['adaptive_alpha']:.4f}")

            # Pipeline stages
            print("\nüìä Est√°gios do Pipeline:")
            for stage, enabled in result['pipeline_stages'].items():
                status = "‚úÖ" if enabled else "‚ùå"
                print(f"  {status} {stage}")

            # M√©tricas cognitivas
            if result.get('cognitive_metrics'):
                print("\nüß† M√âTRICAS COGNITIVAS:")
                cognitive = result['cognitive_metrics']

                if 'contradiction' in cognitive:
                    print(f"  ‚Ä¢ Contradi√ß√£o (m√©dia): {cognitive['contradiction']['mean']:.4f}")
                    print(f"    - Min: {cognitive['contradiction']['min']:.4f}")
                    print(f"    - Max: {cognitive['contradiction']['max']:.4f}")
                    print(f"    - Std: {cognitive['contradiction']['std']:.4f}")

                if 'relevance' in cognitive:
                    print(f"  ‚Ä¢ Relev√¢ncia (m√©dia): {cognitive['relevance']['mean']:.4f}")
                    print(f"    - Min: {cognitive['relevance']['min']:.4f}")
                    print(f"    - Max: {cognitive['relevance']['max']:.4f}")
                    print(f"    - Std: {cognitive['relevance']['std']:.4f}")

                if 'bias' in cognitive:
                    print(f"  ‚Ä¢ Vi√©s (magnitude m√©dia): {cognitive['bias']['mean']:.4f}")
                    print(f"    - Min: {cognitive['bias']['min']:.4f}")
                    print(f"    - Max: {cognitive['bias']['max']:.4f}")
                    print(f"    - Std: {cognitive['bias']['std']:.4f}")

                if 'semantic_health' in cognitive:
                    health = cognitive['semantic_health']
                    print(f"\n  üíö SA√öDE SEM√ÇNTICA:")
                    print(f"    - Sa√∫de de Contradi√ß√£o: {health['contradiction_health']:.4f}")
                    print(f"    - Sa√∫de de Relev√¢ncia: {health['relevance_health']:.4f}")
                    print(f"    - Sa√∫de de Vi√©s: {health['bias_health']:.4f}")
                    print(f"    - üåü SA√öDE GERAL: {health['overall_semantic_health']:.4f}")

                if 'filter_weights' in cognitive:
                    weights = cognitive['filter_weights']
                    print(f"\n  ‚öñÔ∏è  PESOS DOS FILTROS:")
                    print(f"    - Contradi√ß√£o: {weights['contradiction_avg']:.4f}")
                    print(f"    - Irrelev√¢ncia: {weights['irrelevance_avg']:.4f}")
                    print(f"    - Vi√©s: {weights['bias_avg']:.4f}")
            else:
                print("\n‚ö†Ô∏è  Filtros cognitivos n√£o aplicados")

            # Salvar resultado
            results.append({
                'test_case': test_case['name'],
                'input': test_case['text'],
                'result': result
            })

        except Exception as e:
            print(f"\n‚ùå ERRO: {e}")
            import traceback
            traceback.print_exc()

    # M√©tricas finais
    print(f"\n{'=' * 80}")
    print("üìä M√âTRICAS FINAIS DO PROCESSADOR")
    print(f"{'=' * 80}")
    metrics = processor.performance_metrics
    print(f"Total processado: {metrics['total_processed']}")
    print(f"Tempo m√©dio: {metrics['avg_processing_time']:.4f}s")
    print(f"Cache hits: {metrics['cache_hits']}")
    print(f"Filtros cognitivos aplicados: {metrics['cognitive_filters_applied']}")

    # Salvar resultados em JSON
    output_file = Path(__file__).parent / "tmp" / "cognitive_integration_test_results.json"
    output_file.parent.mkdir(parents=True, exist_ok=True)

    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False, default=str)

    print(f"\nüíæ Resultados salvos em: {output_file}")

    print("\n" + "=" * 80)
    print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    print("=" * 80)

if __name__ == "__main__":
    test_cognitive_integration()